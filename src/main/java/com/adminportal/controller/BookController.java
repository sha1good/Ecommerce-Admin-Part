package com.adminportal.controller;

import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.List;


import javax.servlet.http.HttpServletRequest;

import com.adminportal.exception.BookUploadException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MaxUploadSizeExceededException;
import org.springframework.web.multipart.MultipartFile;

import com.adminportal.domain.Book;
import com.adminportal.service.BookService;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

@Controller
@RequestMapping("/book")
public class BookController {
	//@Value is used to read propertises from application.propertise file
	@Value("$spring.http.multipart.max-file-size")
	private String maxFileSize;

	@Autowired
	private BookService bookService;
	
	
	  //Same thing as @Requestmethod("/add")
	@RequestMapping(value="/add",method=RequestMethod.GET)
	public String addBook(Model model) {
		Book book = new Book();
		model.addAttribute("book", book);
		return "addBook";
				
	}

	@RequestMapping( value="/add", method=RequestMethod.POST)
	public String addBookPost(
	    	@ModelAttribute("book")	Book book, HttpServletRequest request) {

		if(Integer.parseInt(book.getBookImage().getSize() +"") > maxFileSize.length()){
			System.out.println("Error Uplaoding the file  from BookController.....");
		throw new BookUploadException("You will not be able to add file bigger than " + maxFileSize  +  "Size");
		}
	//You have to persist the bok to the data base first before you can get an Id of the book.Since our Id is generated by Mysql data bse autogenerated format
		bookService.save(book);
		
	MultipartFile bookImage = book.getBookImage();
	System.out.println("===================book Image" + bookImage);
	//Now let us convert the book to bytes of array
	
	try {
		byte[] bytes = bookImage.getBytes();
		
		String name= book.getId() +".png";
		
		System.out.println("================"+ name);
		
		//Buffered it out to your local system 
		BufferedOutputStream stream= new BufferedOutputStream(new FileOutputStream(new File("src/main/resources/static/image/book/" + name)));
		stream.write(bytes);
		stream.close();
	}catch(Exception e) {
//		 e.printStackTrace();
		System.out.println("Error Uplaoding the file  from BookController.....");
		throw new BookUploadException("You will not be able to add file bigger than " + maxFileSize  +  "Size");
	}
	return "redirect:bookList";
				
	}
	@RequestMapping("/updateBook")
	public String UpDateBookInfo(@RequestParam("id") Long id, Model model) {
	    
		Book book= bookService.findOne(id);
		model.addAttribute("book", book);
		
		return "updateBook";
		
	}
	
	@RequestMapping(value="/updateBook", method=RequestMethod.POST)
	public String updateBook(@ModelAttribute("book") Book book, HttpServletRequest request) {
		
		//Save the book to the data base first , this will hgelp to retrieve the Id of that particular book
		bookService.save(book);
		
		MultipartFile bookImage= book.getBookImage();
		
		if(! bookImage.isEmpty()) {
			try {
				
				byte[] bytes = bookImage.getBytes();
				String name= book.getId() + ".png";
				
				//To Update the existing image in the database or cloud Server, You have to first delete that existing image in the database.
				
				Files.delete(Paths.get("src/main/resources/static/image/book/" + name));
				
				//Now save the new one to the data base
				BufferedOutputStream stream= new BufferedOutputStream(
						new FileOutputStream(new File("src/main/resources/static/image/book/" + name)));
				stream.write(bytes);
				stream.close();
				
			}catch(Exception e) {
				e.printStackTrace();
			}
		}
		
		return "redirect:/book/bookInfo?id="+book.getId();
	}
	
	@RequestMapping("/bookInfo")
	public String bookInfo(@RequestParam("id") Long id, Model model) {
	    
		Book book= bookService.findOne(id);
		model.addAttribute("book", book);
		
		return "bookInfo";
		
	}
	
	@RequestMapping("/bookList")
	public String bookList(Model model) {
		List<Book> bookList= bookService.findAll();
		
		model.addAttribute("bookList",bookList);
		
		return "bookList";
	}
	
	@RequestMapping(value="remove",method= RequestMethod.POST)
	public String removeBook(
			@ModelAttribute("id") String id, Model model
			) {
		bookService.removeOne(Long.parseLong(id.substring(8))); //This means any other String apart from the first 8 characters
		List<Book> bookList =  bookService.findAll();
		model.addAttribute("bookList", bookList);
		
		return "redirect:/book/bookList";
	}
	
	
	
	
}
